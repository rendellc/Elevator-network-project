Git:
  To pull submodules:
    First time: git submodule update --init --recursive
    Afterwards: git submodule update --recursive

Build simulator:
dmd -w -g src/sim_server.d src/timer_event.d -ofSimElevatorServer

Build ElevatorServer
cargo install --force ttk4145_elevator_server

Package loss:
iptables -A INPUT -i eno1 -m statistic -p udp --mode random --probability 0.25 -j DROP

TODO:
  initialize elevator again after death
  measure congestion of network
  retransmition of some messages


Tests:
  Failure modes:
    1.- Some packages are lost
    2.- Elevator/Network for one module down
    3.- Elevator/Network for one module down temporarily and then comes back
    4.- Does the network module crash when ethernet is disconnected
    5.- Turning off elevator power, disconnecting motor wires
    6.- Disregarded orders:
          If placed order is disregarded more than X times after T seconds
          (no acks received), then this elevator takes order.

CODE REVIEW:
  Names of variables, modules, data types, channels
  Simplify modules
  Succession functions are presented
  When defyning struct variables use {..., VariableMemberName: VariableMemberValue, ...}
  Review how lights are updated
  Channel names

  main: XYZOrderMsg type ->

  FSM: 
      necessary doorTimer.Stop()
      send/receiv OrderEvent type, when only ButtonEvent is needed
      door timer as variable
      define function to avoid code multiplication
      Light = Light || something --> Light ||= something




DONE:
  synchronize lights
  outsourcing
  just ID as flag
  automatic discovery of networks
  no lost connection due to inactivity

  Simulations:
    Node temporarily out (TCP cable out and afterwards in)
